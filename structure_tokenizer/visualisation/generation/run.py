# Copyright 2024 InstaDeep Ltd. All rights reserved.#

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import os
from typing import Any, Dict
import argparse

from math import sqrt

import matplotlib.image as mpimg
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
from six.moves import cPickle as pickle

import vq_3d.visualisation as visualisation
from structure_tokenizer.visualisation.invoke_pymol import call_pymol


def plot_structures(title: str, save_dir: str, num_to_plot: int = 16) -> None:
    """Creates a figure from the superposition images generated by PyMol,
        and saves it to file.

    Args:
      seq_id: identifier for the current sample.
      save_dir: path to the directory where the figure is stored (confidence_all.png).
    """

    # list of path to seqs
    chain_dirs = [
        os.path.join(save_dir, d) for d in os.listdir(save_dir)
        if os.path.isdir(os.path.join(save_dir, d))
    ]
    chain_dirs = chain_dirs[:num_to_plot]
    pymol_plot_dir = "pymol_plot"
    
    nrow = int(sqrt(num_to_plot))
    ncol =int(sqrt(num_to_plot))
    fig, axes = plt.subplots(nrow, ncol, figsize=(8, 8))
    fig.patch.set_facecolor("white")
    for i in range(nrow):
        for j in range(ncol):
            axes[i,j].set_xticks([])
            axes[i,j].set_yticks([])            
            # Load image.
            img_path = os.path.join(chain_dirs[nrow*i + j], pymol_plot_dir, "angle0.png")
            img_array = mpimg.imread(img_path)
            axes[i,j].imshow(img_array)
            ## Add metrics
            # metric_path = os.path.join(chain_dirs[nrow*i + j], "metrics.pkl")
            # with open(metric_path, 'rb') as f:
            #     metrics = pickle.load(f)
            metrics = {
                "n_res": 0,
                "sc_rmsd": 0,
            }
            # Set title
            axes[i,j].set_title(
                "len={}; sc-rmsd={}".format(
                    metrics["n_res"], metrics["sc_rmsd"]
                ),
                y=1.0,
                x=.75,
                pad=-15,
                fontsize=10,
            )
            # Remove frame
            axes[i,j].spines['top'].set_visible(False)
            axes[i,j].spines['right'].set_visible(False)
            axes[i,j].spines['bottom'].set_visible(False)
            axes[i,j].spines['left'].set_visible(False)            

    # Add title
    fig.suptitle(
        title,
        # y=0.96,
        fontsize=16,
    )
    fig.tight_layout()

    # Save figure if needed
    fig.savefig(os.path.join(save_dir, "generated_structures.png"), format="png", dpi=300)
    plt.close(fig)


def plot_structures_pymol(
    filepath: str,
) -> None:
    """Plots the predicted/target PDB structures using a PyMol script.

    Args:
      filepath_prediction: path to the predicted PDB file.
      filepath_target: path to the target PDB file.
    """

    if not os.path.isfile(filepath):
        print(f"File not found {filepath}")
    base = os.path.dirname(visualisation.__file__) #BG: ugly
    pymol_script = os.path.join(base, "generation", "pymol_script.py") #BG: ugly
    call_pymol(pymol_script, [filepath,])


def main(model_names, data_dir, num_to_plot=16):
    # looping over the models
    for model_name in model_names:
        print(f"Plotting generation of {model_name}.")
        if not os.path.isdir(data_dir):
            raise ValueError(
                f"Data directory not found: {data_dir}"
            )
        save_dir = os.path.join(data_dir, model_name)
        if not os.path.isdir(save_dir):
            raise ValueError(
                f"Model directory not found: {save_dir}"
            )
        # Plotting the pymol figs and loading the metrics
        for root_dir, subdirs, _ in os.walk(save_dir):
            for subdir in subdirs:
                data_path = os.path.join(root_dir, subdir)
                # plotting superpositions with pymol
                plot_structures_pymol(
                    os.path.join(data_path,"structure.pdb"),
                )
            break #BG: we just want to loop over the first dir level

        # Make a nice plot
        plot_structures(
            title=model_name, save_dir=save_dir, num_to_plot=num_to_plot
        )
        print(f"Plotting {model_name} done.\n")

if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description="command line parser for config file specification"
    )
    parser.add_argument("--model_name")
    parser.add_argument(
        "--data_path",
        default="vizu/generation",
        help="Base directory where the data can be found. Expect to have sub folder for each model."
    )
    args = parser.parse_args()

    if args.model_name:
        ########################################
        ####     With config file     ######
        ########################################
        model_names = [args.model_name,]

    else:
        #########################################
        #####     models sweep     ######
        #########################################
        model_names = [
            "Baseline",
            "Downsampling_factor_1",
        ]

    main(model_names, args.data_path)
